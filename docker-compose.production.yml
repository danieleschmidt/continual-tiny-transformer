# Production Docker Compose Configuration for Continual Learning Transformer
# This configuration is optimized for production deployment with security, monitoring, and scaling
version: '3.8'

services:
  # Main application service with load balancing
  continual-transformer-app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    image: continual-transformer:latest
    container_name: continual-transformer-app
    restart: unless-stopped
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - WORKERS=4
      - MAX_BATCH_SIZE=32
      - ENABLE_MONITORING=true
      - ENABLE_SECURITY=true
      - REDIS_URL=redis://redis:6379/0
      - DATABASE_URL=postgresql://postgres:${POSTGRES_PASSWORD}@postgres:5432/continual_transformer
    ports:
      - "8000:8000"  # API port
    volumes:
      - ./models:/app/models:ro
      - ./logs:/app/logs
      - app-data:/app/data
    depends_on:
      - redis
      - postgres
      - prometheus
    networks:
      - continual-network
    deploy:
      replicas: 3
      resources:
        limits:
          memory: 4G
          cpus: '2.0'
        reservations:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s

  # Load balancer
  nginx:
    image: nginx:alpine
    container_name: continual-transformer-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - ./logs/nginx:/var/log/nginx
    depends_on:
      - continual-transformer-app
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'

  # Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: continual-transformer-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis-data:/data
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
    healthcheck:
      test: ["CMD", "redis-cli", "--no-auth-warning", "-a", "${REDIS_PASSWORD}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3

  # PostgreSQL for metadata and configuration
  postgres:
    image: postgres:15-alpine
    container_name: continual-transformer-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=continual_transformer
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./database/init:/docker-entrypoint-initdb.d:ro
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: continual-transformer-prometheus
    restart: unless-stopped
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=15d'
      - '--web.enable-lifecycle'
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Grafana for monitoring dashboards
  grafana:
    image: grafana/grafana:latest
    container_name: continual-transformer-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=prometheus
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Elasticsearch for log aggregation
  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.11.0
    container_name: continual-transformer-elasticsearch
    restart: unless-stopped
    environment:
      - node.name=continual-elasticsearch
      - cluster.name=continual-cluster
      - discovery.type=single-node
      - bootstrap.memory_lock=true
      - "ES_JAVA_OPTS=-Xms1g -Xmx1g"
      - xpack.security.enabled=false
    ulimits:
      memlock:
        soft: -1
        hard: -1
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data
    ports:
      - "9200:9200"
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 2G
          cpus: '1.0'

  # Kibana for log visualization
  kibana:
    image: docker.elastic.co/kibana/kibana:8.11.0
    container_name: continual-transformer-kibana
    restart: unless-stopped
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch:9200
    ports:
      - "5601:5601"
    depends_on:
      - elasticsearch
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Logstash for log processing
  logstash:
    image: docker.elastic.co/logstash/logstash:8.11.0
    container_name: continual-transformer-logstash
    restart: unless-stopped
    volumes:
      - ./monitoring/logstash/pipeline:/usr/share/logstash/pipeline:ro
      - ./logs:/logs:ro
    depends_on:
      - elasticsearch
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Jaeger for distributed tracing
  jaeger:
    image: jaegertracing/all-in-one:latest
    container_name: continual-transformer-jaeger
    restart: unless-stopped
    environment:
      - COLLECTOR_OTLP_ENABLED=true
    ports:
      - "16686:16686"  # Jaeger UI
      - "14268:14268"  # Jaeger collector
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'

  # Security scanning service
  security-scanner:
    build:
      context: .
      dockerfile: Dockerfile.security
    container_name: continual-transformer-security
    restart: unless-stopped
    environment:
      - SCAN_INTERVAL=3600  # 1 hour
      - ALERT_WEBHOOK=${SECURITY_WEBHOOK_URL}
    volumes:
      - ./logs:/logs:ro
      - ./models:/models:ro
    depends_on:
      - continual-transformer-app
    networks:
      - continual-network
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.25'

# Network configuration
networks:
  continual-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volume configuration for data persistence
volumes:
  app-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  elasticsearch-data:
    driver: local

# Production deployment notes:
# 1. Set environment variables in .env file
# 2. Configure SSL certificates in nginx/ssl/
# 3. Set up proper backup strategies for persistent volumes
# 4. Configure log rotation and retention policies
# 5. Set up alerting rules in Prometheus
# 6. Configure Grafana dashboards for monitoring
# 7. Set up proper network security groups
# 8. Configure auto-scaling policies if using orchestrator