[build-system]
requires = ["setuptools>=61.0", "wheel"]
build-backend = "setuptools.build_meta"

[project]
name = "continual-tiny-transformer"
version = "0.1.0"
description = "Memory-efficient continual learning for transformers with zero parameter expansion"
readme = "README.md"
license = {text = "MIT"}
authors = [
    {name = "Daniel Schmidt", email = "daniel@example.com"},
]
maintainers = [
    {name = "Daniel Schmidt", email = "daniel@example.com"},
]
keywords = [
    "continual-learning",
    "transformers", 
    "machine-learning",
    "deep-learning",
    "pytorch",
    "zero-parameter",
    "catastrophic-forgetting"
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "Intended Audience :: Developers",
    "Intended Audience :: Science/Research", 
    "License :: OSI Approved :: MIT License",
    "Operating System :: OS Independent",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.8",
    "Programming Language :: Python :: 3.9",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12",
    "Topic :: Scientific/Engineering :: Artificial Intelligence",
    "Topic :: Software Development :: Libraries :: Python Modules",
]
requires-python = ">=3.8"
dependencies = [
    "torch>=1.12.0",
    "transformers>=4.20.0",
    "numpy>=1.21.0",
    "scipy>=1.7.0",
    "scikit-learn>=1.0.0",
    "datasets>=2.0.0",
    "tokenizers>=0.12.0",
    "tqdm>=4.62.0",
    "pyyaml>=6.0",
    "wandb>=0.12.0",
    "tensorboard>=2.8.0",
    "hydra-core>=1.1.0",
    "omegaconf>=2.1.0",
]

[project.optional-dependencies]
dev = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0", 
    "pytest-xdist>=3.0.0",
    "pytest-mock>=3.8.0",
    "black>=22.0.0",
    "isort>=5.10.0",
    "flake8>=5.0.0",
    "mypy>=0.991",
    "pre-commit>=2.20.0",
    "tox>=4.0.0",
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0",
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
    "jupyter>=1.0.0",
    "ipykernel>=6.15.0",
]
docs = [
    "sphinx>=5.0.0",
    "sphinx-rtd-theme>=1.0.0", 
    "myst-parser>=0.18.0",
    "nbsphinx>=0.8.0",
    "sphinx-autodoc-typehints>=1.19.0",
    "sphinxcontrib-bibtex>=2.5.0",
]
test = [
    "pytest>=7.0.0",
    "pytest-cov>=4.0.0",
    "pytest-xdist>=3.0.0", 
    "pytest-mock>=3.8.0",
    "pytest-benchmark>=4.0.0",
    "hypothesis>=6.54.0",
]
benchmark = [
    "matplotlib>=3.5.0",
    "seaborn>=0.11.0",
    "pandas>=1.4.0",
    "memory-profiler>=0.60.0",
    "psutil>=5.9.0",
]

[project.urls]
Homepage = "https://github.com/your-org/continual-tiny-transformer"
Documentation = "https://continual-tiny-transformer.readthedocs.io/"
Repository = "https://github.com/your-org/continual-tiny-transformer.git"
Issues = "https://github.com/your-org/continual-tiny-transformer/issues"
Changelog = "https://github.com/your-org/continual-tiny-transformer/blob/main/CHANGELOG.md"

[project.scripts]
continual-transformer = "continual_transformer.cli:main"

[tool.setuptools]
package-dir = {"" = "src"}

[tool.setuptools.packages.find]
where = ["src"]

[tool.setuptools.package-data]
continual_transformer = ["py.typed", "*.yaml", "*.yml", "*.json"]

# Black formatting configuration
[tool.black]
line-length = 88
target-version = ['py38', 'py39', 'py310', 'py311']
include = '\.pyi?$'
extend-exclude = '''
/(
    \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | _build
  | buck-out
  | build
  | dist
)/
'''

# isort configuration
[tool.isort]
profile = "black"
multi_line_output = 3
line_length = 88
known_first_party = ["continual_transformer"]
skip_glob = ["*/migrations/*"]

# pytest configuration  
[tool.pytest.ini_options]
testpaths = ["tests"]  
python_files = ["test_*.py", "*_test.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = [
    "--strict-markers",
    "--strict-config", 
    "--verbose",
    "--cov=continual_transformer",
    "--cov-report=term-missing",
    "--cov-report=html:htmlcov",
    "--cov-report=xml",
    "--cov-fail-under=80",
]
markers = [
    "slow: marks tests as slow (deselect with '-m \"not slow\"')",
    "integration: marks tests as integration tests",
    "unit: marks tests as unit tests",
    "gpu: marks tests that require GPU",
]
filterwarnings = [
    "error",
    "ignore::UserWarning",
    "ignore::DeprecationWarning",
]

# mypy configuration
[tool.mypy]
python_version = "3.8"
warn_return_any = true
warn_unused_configs = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
check_untyped_defs = true
disallow_untyped_decorators = true
no_implicit_optional = true
warn_redundant_casts = true
warn_unused_ignores = true
warn_no_return = true
warn_unreachable = true
strict_equality = true
show_error_codes = true

[[tool.mypy.overrides]]
module = [
    "torch.*",
    "transformers.*", 
    "datasets.*",
    "wandb.*",
    "tensorboard.*",
]
ignore_missing_imports = true

# Coverage configuration
[tool.coverage.run]
source = ["src/continual_transformer"]
omit = [
    "*/tests/*",
    "*/test_*.py",
    "*/__pycache__/*",
    "*/site-packages/*",
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if settings.DEBUG",
    "raise AssertionError",
    "raise NotImplementedError",
    "if 0:",
    "if __name__ == .__main__.:",
    "class .*\\bProtocol\\):",
    "@(abc\\.)?abstractmethod",
]

# Ruff linter configuration (modern alternative to flake8)
[tool.ruff]
select = [
    "E",  # pycodestyle errors
    "W",  # pycodestyle warnings  
    "F",  # pyflakes
    "I",  # isort
    "B",  # flake8-bugbear
    "C4", # flake8-comprehensions
    "UP", # pyupgrade
    "ARG", # flake8-unused-arguments
    "SIM", # flake8-simplify
    "TID", # flake8-tidy-imports
    "ICN", # flake8-import-conventions
    "PL",  # pylint
]
ignore = [
    "E501",  # line too long, handled by black
    "B008",  # do not perform function calls in argument defaults
    "C901",  # too complex
    "PLR0913", # too many arguments to function call
]
line-length = 88
target-version = "py38"
src = ["src", "tests"]

[tool.ruff.per-file-ignores]
"tests/**/*.py" = ["PLR2004", "S101", "TID252"]

[tool.ruff.isort]
known-first-party = ["continual_transformer"]

[tool.ruff.flake8-tidy-imports]
ban-relative-imports = "all"

# Bandit security linter configuration
[tool.bandit]
exclude_dirs = ["tests", "build", "dist"]
tests = ["B201", "B301"]
skips = ["B101", "B601"]