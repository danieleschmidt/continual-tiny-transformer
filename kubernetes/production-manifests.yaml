---
apiVersion: v1
kind: Namespace
metadata:
  name: continual-transformer
  labels:
    app: continual-transformer
    environment: production

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: continual-transformer-config
  namespace: continual-transformer
data:
  config.yaml: |
    model:
      name: "bert-base-uncased"
      max_tasks: 50
      adaptation_method: "activation"
      freeze_base_model: true
    
    training:
      learning_rate: 2e-5
      batch_size: 32
      num_epochs: 10
      warmup_steps: 500
      gradient_clipping: 1.0
      mixed_precision: true
    
    optimization:
      enable_nas: true
      enable_knowledge_transfer: true
      enable_monitoring: true
      memory_alert_threshold: 0.85
      cache_size_gb: 10.0
    
    security:
      enable_input_validation: true
      enable_output_sanitization: true
      max_sequence_length: 512
      rate_limit_per_minute: 1000
    
    deployment:
      replicas: 3
      resources:
        requests:
          cpu: "2"
          memory: "8Gi"
          nvidia.com/gpu: "1"
        limits:
          cpu: "4"
          memory: "16Gi"
          nvidia.com/gpu: "1"

---
apiVersion: v1
kind: Secret
metadata:
  name: continual-transformer-secrets
  namespace: continual-transformer
type: Opaque
data:
  # Base64 encoded secrets (replace with actual values)
  model-api-key: <base64-encoded-api-key>
  monitoring-token: <base64-encoded-token>
  database-password: <base64-encoded-password>

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: model-storage
  namespace: continual-transformer
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 100Gi
  storageClassName: fast-ssd

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: cache-storage
  namespace: continual-transformer
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 50Gi
  storageClassName: standard

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: continual-transformer-api
  namespace: continual-transformer
  labels:
    app: continual-transformer
    component: api
spec:
  replicas: 3
  selector:
    matchLabels:
      app: continual-transformer
      component: api
  template:
    metadata:
      labels:
        app: continual-transformer
        component: api
    spec:
      serviceAccountName: continual-transformer
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        fsGroup: 1000
      containers:
      - name: api
        image: continual-transformer:latest
        imagePullPolicy: Always
        ports:
        - containerPort: 8000
          name: http
        - containerPort: 8001
          name: health
        env:
        - name: ENVIRONMENT
          value: "production"
        - name: CONFIG_PATH
          value: "/etc/config/config.yaml"
        - name: MODEL_STORAGE_PATH
          value: "/data/models"
        - name: CACHE_STORAGE_PATH
          value: "/data/cache"
        - name: CUDA_VISIBLE_DEVICES
          value: "0"
        volumeMounts:
        - name: config-volume
          mountPath: /etc/config
        - name: model-storage
          mountPath: /data/models
        - name: cache-storage
          mountPath: /data/cache
        - name: secrets-volume
          mountPath: /etc/secrets
          readOnly: true
        resources:
          requests:
            cpu: "2"
            memory: "8Gi"
            nvidia.com/gpu: "1"
          limits:
            cpu: "4"
            memory: "16Gi"
            nvidia.com/gpu: "1"
        livenessProbe:
          httpGet:
            path: /health
            port: 8001
          initialDelaySeconds: 60
          periodSeconds: 30
          timeoutSeconds: 10
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: 8001
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        lifecycle:
          preStop:
            exec:
              command: ["/bin/sh", "-c", "sleep 15"]
      volumes:
      - name: config-volume
        configMap:
          name: continual-transformer-config
      - name: model-storage
        persistentVolumeClaim:
          claimName: model-storage
      - name: cache-storage
        persistentVolumeClaim:
          claimName: cache-storage
      - name: secrets-volume
        secret:
          secretName: continual-transformer-secrets
      nodeSelector:
        accelerator: nvidia-tesla-v100
      tolerations:
      - key: nvidia.com/gpu
        operator: Exists
        effect: NoSchedule

---
apiVersion: v1
kind: Service
metadata:
  name: continual-transformer-api
  namespace: continual-transformer
  labels:
    app: continual-transformer
    component: api
spec:
  type: ClusterIP
  ports:
  - port: 80
    targetPort: 8000
    protocol: TCP
    name: http
  - port: 8001
    targetPort: 8001
    protocol: TCP
    name: health
  selector:
    app: continual-transformer
    component: api

---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: continual-transformer-ingress
  namespace: continual-transformer
  annotations:
    kubernetes.io/ingress.class: nginx
    nginx.ingress.kubernetes.io/ssl-redirect: "true"
    nginx.ingress.kubernetes.io/proxy-body-size: "50m"
    nginx.ingress.kubernetes.io/proxy-read-timeout: "300"
    nginx.ingress.kubernetes.io/rate-limit: "1000"
    cert-manager.io/cluster-issuer: letsencrypt-prod
spec:
  tls:
  - hosts:
    - api.continual-transformer.com
    secretName: continual-transformer-tls
  rules:
  - host: api.continual-transformer.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: continual-transformer-api
            port:
              number: 80

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: continual-transformer-pdb
  namespace: continual-transformer
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: continual-transformer
      component: api

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: continual-transformer-hpa
  namespace: continual-transformer
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: continual-transformer-api
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 100
        periodSeconds: 60

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: continual-transformer
  namespace: continual-transformer

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: continual-transformer
  name: continual-transformer-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: continual-transformer-rolebinding
  namespace: continual-transformer
subjects:
- kind: ServiceAccount
  name: continual-transformer
  namespace: continual-transformer
roleRef:
  kind: Role
  name: continual-transformer-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: batch/v1
kind: CronJob
metadata:
  name: model-backup
  namespace: continual-transformer
spec:
  schedule: "0 2 * * *"  # Daily at 2 AM
  jobTemplate:
    spec:
      template:
        spec:
          containers:
          - name: backup
            image: continual-transformer:latest
            command:
            - /bin/sh
            - -c
            - |
              python -c "
              from continual_transformer.deployment import ModelBackupManager
              backup_manager = ModelBackupManager('/data/models', '/data/backups')
              backup_manager.create_backup()
              "
            volumeMounts:
            - name: model-storage
              mountPath: /data/models
            - name: backup-storage
              mountPath: /data/backups
          volumes:
          - name: model-storage
            persistentVolumeClaim:
              claimName: model-storage
          - name: backup-storage
            persistentVolumeClaim:
              claimName: backup-storage
          restartPolicy: OnFailure

---
apiVersion: monitoring.coreos.com/v1
kind: ServiceMonitor
metadata:
  name: continual-transformer-metrics
  namespace: continual-transformer
  labels:
    app: continual-transformer
spec:
  selector:
    matchLabels:
      app: continual-transformer
      component: api
  endpoints:
  - port: health
    path: /metrics
    interval: 30s
    scrapeTimeout: 10s

---
apiVersion: v1
kind: Service
metadata:
  name: continual-transformer-headless
  namespace: continual-transformer
  labels:
    app: continual-transformer
    component: api
spec:
  clusterIP: None
  ports:
  - port: 8000
    targetPort: 8000
    protocol: TCP
    name: http
  selector:
    app: continual-transformer
    component: api

---
apiVersion: networking.k8s.io/v1
kind: NetworkPolicy
metadata:
  name: continual-transformer-netpol
  namespace: continual-transformer
spec:
  podSelector:
    matchLabels:
      app: continual-transformer
  policyTypes:
  - Ingress
  - Egress
  ingress:
  - from:
    - namespaceSelector:
        matchLabels:
          name: ingress-nginx
    ports:
    - protocol: TCP
      port: 8000
  - from:
    - namespaceSelector:
        matchLabels:
          name: monitoring
    ports:
    - protocol: TCP
      port: 8001
  egress:
  - to: []
    ports:
    - protocol: TCP
      port: 443  # HTTPS
    - protocol: TCP
      port: 53   # DNS
    - protocol: UDP
      port: 53   # DNS