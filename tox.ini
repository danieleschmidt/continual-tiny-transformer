[tox]
# Tox configuration for multi-environment testing
# Run with: tox
# List environments: tox -l
# Run specific environment: tox -e py39

envlist = 
    py{38,39,310,311}
    lint
    type
    security
    docs
minversion = 4.0
isolated_build = true

[testenv]
# Base test environment configuration
deps = 
    -r{toxinidir}/requirements-dev.txt
commands = 
    pytest {posargs:tests/}
extras = test
setenv =
    PYTHONPATH = {toxinidir}/src
    COVERAGE_FILE = {toxworkdir}/.coverage.{envname}
passenv = 
    CI
    CUDA_VISIBLE_DEVICES
    TORCH_*

[testenv:py38]
description = Run tests with Python 3.8
basepython = python3.8

[testenv:py39] 
description = Run tests with Python 3.9
basepython = python3.9

[testenv:py310]
description = Run tests with Python 3.10  
basepython = python3.10

[testenv:py311]
description = Run tests with Python 3.11
basepython = python3.11

[testenv:lint]
description = Run linting with ruff and formatting checks
deps = 
    ruff>=0.1.0
    black>=22.0.0
    isort>=5.10.0
commands = 
    ruff check src/ tests/
    black --check --diff src/ tests/
    isort --check --diff src/ tests/

[testenv:format]
description = Auto-format code with black and isort
deps = 
    black>=22.0.0
    isort>=5.10.0
commands = 
    black src/ tests/
    isort src/ tests/

[testenv:type]
description = Run type checking with mypy
deps = 
    mypy>=1.0.0
    torch
    transformers
    numpy
    types-PyYAML
commands = 
    mypy src/

[testenv:security]
description = Run security checks with bandit
deps = 
    bandit>=1.7.0
commands = 
    bandit -r src/ -f json

[testenv:docs]
description = Build documentation with Sphinx
changedir = docs
deps = 
    sphinx>=5.0.0
    sphinx-rtd-theme>=1.0.0
    myst-parser>=0.18.0
    -r{toxinidir}/requirements.txt
commands = 
    sphinx-build -W -b html . _build/html

[testenv:coverage]
description = Run tests with coverage reporting
deps = 
    {[testenv]deps}
    coverage[toml]>=6.0
commands = 
    coverage run -m pytest {posargs:tests/}
    coverage report
    coverage html
    coverage xml

[testenv:benchmark]
description = Run benchmark tests
deps = 
    {[testenv]deps}
    pytest-benchmark>=4.0.0
commands = 
    pytest tests/benchmarks/ --benchmark-only {posargs}

[testenv:integration]
description = Run integration tests
commands = 
    pytest tests/integration/ {posargs}

[testenv:unit]
description = Run unit tests only
commands = 
    pytest tests/unit/ {posargs}

[testenv:gpu]
description = Run GPU-specific tests (requires CUDA)
commands = 
    pytest -m gpu {posargs}

[testenv:clean]
description = Clean up build artifacts and cache
deps = 
commands = 
    python -c "import shutil; shutil.rmtree('build', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('dist', ignore_errors=True)" 
    python -c "import shutil; shutil.rmtree('.pytest_cache', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('htmlcov', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.coverage', ignore_errors=True)"
    python -c "import shutil; shutil.rmtree('.mypy_cache', ignore_errors=True)"

[testenv:build]
description = Build package for distribution
deps = 
    build>=0.8.0
commands = 
    python -m build

[coverage:run]
source = src/
branch = true
omit = 
    */tests/*
    */test_*.py

[coverage:report] 
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:

[coverage:html]
directory = htmlcov