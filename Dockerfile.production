# Multi-stage production Dockerfile for Continual Transformer
# Optimized for GPU inference and production deployment

# Stage 1: Base image with CUDA and Python
FROM nvidia/cuda:11.8-devel-ubuntu20.04 as base

# Set environment variables
ENV DEBIAN_FRONTEND=noninteractive
ENV PYTHONUNBUFFERED=1
ENV PYTHONDONTWRITEBYTECODE=1
ENV CUDA_VISIBLE_DEVICES=0

# Install system dependencies
RUN apt-get update && apt-get install -y \
    python3.9 \
    python3.9-dev \
    python3-pip \
    wget \
    curl \
    git \
    build-essential \
    libssl-dev \
    libffi-dev \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic link for python
RUN ln -sf /usr/bin/python3.9 /usr/bin/python

# Upgrade pip
RUN python -m pip install --no-cache-dir --upgrade pip setuptools wheel

# Stage 2: Dependencies installation
FROM base as dependencies

# Copy requirements first for better caching
COPY requirements.txt /tmp/requirements.txt
COPY requirements-prod.txt /tmp/requirements-prod.txt

# Install Python dependencies
RUN pip install --no-cache-dir -r /tmp/requirements.txt
RUN pip install --no-cache-dir -r /tmp/requirements-prod.txt

# Install PyTorch with CUDA support
RUN pip install --no-cache-dir torch torchvision torchaudio --index-url https://download.pytorch.org/whl/cu118

# Install additional production dependencies
RUN pip install --no-cache-dir \
    fastapi==0.104.1 \
    uvicorn[standard]==0.24.0 \
    prometheus-client==0.18.0 \
    gunicorn==21.2.0 \
    psutil==5.9.6 \
    redis==5.0.1 \
    celery==5.3.4

# Stage 3: Application
FROM dependencies as application

# Create non-root user for security
RUN groupadd -r appgroup && useradd -r -g appgroup appuser

# Create application directories
RUN mkdir -p /app /data/models /data/cache /data/logs /etc/app
RUN chown -R appuser:appgroup /app /data /etc/app

# Set working directory
WORKDIR /app

# Copy application code
COPY --chown=appuser:appgroup src/ /app/src/
COPY --chown=appuser:appgroup deployment/ /app/deployment/
COPY --chown=appuser:appgroup scripts/ /app/scripts/
COPY --chown=appuser:appgroup examples/ /app/examples/
COPY --chown=appuser:appgroup pyproject.toml /app/
COPY --chown=appuser:appgroup README.md /app/

# Install the package
RUN pip install --no-cache-dir -e .

# Copy configuration templates
COPY --chown=appuser:appgroup configs/ /etc/app/configs/

# Create startup script
RUN cat > /app/start.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting Continual Transformer API..."

# Check if CUDA is available
if nvidia-smi > /dev/null 2>&1; then
    echo "CUDA is available: $(nvidia-smi --query-gpu=name --format=csv,noheader,nounits)"
    export CUDA_AVAILABLE=true
else
    echo "CUDA not available, running on CPU"
    export CUDA_AVAILABLE=false
    export CUDA_VISIBLE_DEVICES=""
fi

# Set Python path
export PYTHONPATH=/app/src:$PYTHONPATH

# Run health check
python -c "
import sys
sys.path.insert(0, '/app/src')
try:
    from continual_transformer import ContinualTransformer, ContinualConfig
    print('✅ Package imports successfully')
except Exception as e:
    print(f'❌ Import failed: {e}')
    sys.exit(1)
"

# Check memory
python -c "
import psutil
mem = psutil.virtual_memory()
print(f'Memory: {mem.used/1024/1024/1024:.1f}GB used / {mem.total/1024/1024/1024:.1f}GB total ({mem.percent:.1f}%)')
if mem.percent > 90:
    print('⚠️ High memory usage detected')
"

# Set default values
export HOST=${HOST:-0.0.0.0}
export PORT=${PORT:-8000}
export WORKERS=${WORKERS:-1}
export MODEL_NAME=${MODEL_NAME:-bert-base-uncased}
export MAX_TASKS=${MAX_TASKS:-50}

# Start the API server
echo "Starting server on $HOST:$PORT with $WORKERS workers"
exec python /app/deployment/production_api.py
EOF

RUN chmod +x /app/start.sh

# Create health check script
RUN cat > /app/health_check.sh << 'EOF'
#!/bin/bash
set -e

# Check if the API is responding
response=$(curl -s -o /dev/null -w "%{http_code}" http://localhost:8000/health || echo "000")

if [ "$response" = "200" ]; then
    echo "✅ Health check passed"
    exit 0
else
    echo "❌ Health check failed (HTTP $response)"
    exit 1
fi
EOF

RUN chmod +x /app/health_check.sh

# Stage 4: Production image
FROM application as production

# Switch to non-root user
USER appuser

# Expose ports
EXPOSE 8000 8001

# Set default environment variables
ENV ENVIRONMENT=production
ENV LOG_LEVEL=info
ENV MODEL_STORAGE_PATH=/data/models
ENV CACHE_STORAGE_PATH=/data/cache

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=60s --retries=3 \
    CMD /app/health_check.sh

# Volume mounts for data persistence
VOLUME ["/data/models", "/data/cache", "/data/logs"]

# Default command
CMD ["/app/start.sh"]

# Labels for metadata
LABEL maintainer="Terragon Labs"
LABEL version="1.0.0"
LABEL description="Production-ready Continual Transformer API"
LABEL org.opencontainers.image.source="https://github.com/your-org/continual-tiny-transformer"
LABEL org.opencontainers.image.documentation="https://github.com/your-org/continual-tiny-transformer/README.md"
LABEL org.opencontainers.image.licenses="MIT"

# Stage 5: Development image (optional)
FROM application as development

# Install development dependencies
RUN pip install --no-cache-dir \
    pytest==7.4.3 \
    pytest-cov==4.1.0 \
    pytest-asyncio==0.21.1 \
    black==23.11.0 \
    isort==5.12.0 \
    ruff==0.1.6 \
    mypy==1.7.0 \
    jupyter==1.0.0 \
    ipykernel==6.26.0

# Create development startup script
RUN cat > /app/start_dev.sh << 'EOF'
#!/bin/bash
set -e

echo "Starting Continual Transformer API in development mode..."

export PYTHONPATH=/app/src:$PYTHONPATH
export ENVIRONMENT=development
export LOG_LEVEL=debug

# Run tests if requested
if [ "$RUN_TESTS" = "true" ]; then
    echo "Running tests..."
    pytest /app/tests/ -v --cov=/app/src
fi

# Start development server with hot reload
uvicorn deployment.production_api:app \
    --host ${HOST:-0.0.0.0} \
    --port ${PORT:-8000} \
    --reload \
    --log-level debug
EOF

RUN chmod +x /app/start_dev.sh

# Switch to non-root user
USER appuser

# Development command
CMD ["/app/start_dev.sh"]